Node.js - Beginner to Advance course with projects



Section 01: Javascript - Bonus


01. Course introduction 

02. Javascript story - from console to v8 engine

03. How Javascript executes the code - Behind the scene
-open link: https://nodejs.org/en
-type command: node -v
-course hello.js file
-open terminal and type command: node hello.js

04. Data types, variables and constants in Javascript
-create folder 01-part and files printing.js, datatype.js and changes.js
-type command: node printing.js
-type command: node datatype.js
-type command: node changes.js

05. Operations in Javascript
-create files operations.js, logical.js, assignment.js and operatorPrecedence.js
-type command: node operations.js
-type command: node logical.js
-type command: node assignment.js
-type command: node operatorPrecedence.js

06. Primitives in Javascript
-create folder 02-part and primitives.js file
-type command: node primitives.js

07. Non primitives in Javascript
-create nonPrimitives.js file
-type command: node nonPrimitives.js

08. Five challenges on conditions in Javascript
-create folder 03-part and condition-challenges.js file
-type command: node condition-challenges.js

09. Facing ten challenges in Array and methods
-create folder 04-part and arrayChallenges.js file
-type command: node arrayChallenges.js

10. Introduction to loops in Javascript
-create loopChallenges.js file
-type command: node loopChallenges.js

11. Defeat 6 loop challenges in Javascript
-create more loops in loopChallenges.js file
-type command: node loopChallenges.js

12. Ten loop challenges to learn all kind of loops in Javascript
-in folder 04-part create levelUpChallenges.js file
-type command: node levelUpChallenges.js

13. Function, arrow function, THIS and context in Javascript
-create folder 05-part and functions.js file
-type command: node functions.js

14. Higher order functions and nested functions in Javascript
-create more functions in functions.js file



Section 02: Getting started with Node.js: From core concepts to modules and file system


15. What is Node.js and why use it for server-side development 

16. Installing Node.js and setting up a local development environment

17. Your first Node.js script: Writing and running Hello world
-create folder hello-world and script.js file
-type command: node --help
-type command: node --watch script.js

18. Node.js vs browser Javascript engines: key differences
-in script.js file invoke function alert()
-two different environments to run JS: Browser and Node.js

19. Understanding Node.js modules and their role in structuring code
-create folder 01-modules and index.js file
-three types of modules: built in, 3rd party and custom modules
-in index.js file create variable const fs
-create notes.txt file
-create variable const content
-open link: https://stackoverflow.com/questions/51349900/what-does-node-module-wrapper-function-mean-in-node

20. Working with third-party modules using npm and package.json
-open link: https://www.npmjs.com
-open link: https://www.npmjs.com/package/@types/node
-type command: npm init
-type command: npm i @types/node
-check folder node_modules (do not touch)
-check package-lock.json file
-create .gitignore file to ignore folder node_modules
-delete folder node_modules and type command npm i
-type command: node --watch index.js

21. Using the file system (FS) module to read and write files
-open link: https://nodejs.org/api/fs.html
-in index.js file update function require()
-invoke function fs.writeFileSync()
-invoke function fs.appendFileSync()
-check copy.txt file
-invoke function fs.mkdirSync()
-invoke function fs.rmdirSync()
-invoke function fs.unlinkSync()

22. Understanding blocking vs non-blocking code execution in Node.js
-create script.js file
-in script.js file import fs module
-type command: node --watch script.js

23. The internal architecture of Node.js: Event loop and thread pool
-create folder images and add an image of internal architecture



Section 03: Understanding events and buffers in Node.js: Building reactive apps


24. What are events in Node.js and why are they important ?
-open link: https://nodejs.org/api/events.html

25. Creating and using event emitters in Node.js
-create folder 02-events and myEvents.js file
-in myEvents.js file add logic for event emitter
-type command: node --watch myEvents.js
-create myEventClass.js file and class Chat
-type command: node --watch myEventClass.js
-create myErrorEvents.js file
-in myErrorEvents.js file add logic for emitting error event
-type command: node --watch myErrorEvents.js

26. Building a real-time chat app with custom events in Node.js
-create folder chatApp
-in folder chatApp create files chatRoom.js and index.js
-in chatRoom.js file create and export class ChatRoom with methods
-in index.js file import class ChatRoom and create variable const chat
-invoke three events chat.on()
-invoke methods chat.join(), chat.sendMessage() and chat.leave()
-type command: node --watch index.js

27. Introduction to Buffers in Node.js: What and why
-open link: https://nodejs.org/api/buffer.html
-open link: https://calc.penjee.com

28. Working with buffers in Node.js using practical code examples
-create folder 03-buffers and bufferBasic.js file
-in bufferBasic.js file import object Buffer
-create more buf variables
-type command: node --watch bufferBasic.js



Section 04: Building web servers with native HTTP module in Node.js


29. Introduction to HTTP protocol and its role in web communications
-open link: https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/Overview

30. HTTP methods and status codes explained for backend developers
-open link: https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Status

31. Creating a basic HTTP server with core Node.js modules
-create folder http-server and index.js file
-type command: npm init
-type command: npm i @types/node
-create .gitignore file to ignore folder node_modules
-in index.js file add logic for basic http server
-type command: node --watch index.js
-open route: http://localhost:8000

32. Deep dive into HTTP request handling and server routing in Node.js

33. Building a custom server with Node.js: Hands-on coding session
-in package.json file add command start
-type command: npm start
-in index.js file update logic for incoming request
-open route: http://localhost:8000
-add switch case
-open route: http://localhost:8000
-open route: http://localhost:8000/about
-open route: http://localhost:8000/contact-us
-open route: http://localhost:8000/test

34. Using API clients to test Node.js HTTP endpoints
-open link: https://www.postman.com
-open Postman on your local machine

35. Challenge: Build a custom task with native HTTP server in Node.js
-create folder http-server-task
-create task.md file
-type command: npm init
-create index.js file
-type command: npm i @types/node
-in package.json file add command start
-create .gitignore file to ignore folder node_modules and log.txt file
-type command: npm start
-open Postman and create collection HTTP Server Task for endpoints
-create and test four endpoints
-in index.js file add logic from task.md file



Section 05: Express.js fundamentals and Book Store project


36. Introduction to Express framework and its core features
-open link: https://expressjs.com

37. Creating your first Express app and file structure setup
-create folder express-setup
-type command: npm init
-open link: https://www.npmjs.com/package/@types/node/v/22.0.0
-open link: https://www.npmjs.com/package/@types/express/v/5.0.2
-open link: https://www.npmjs.com/package/express/v/5.0.1
-type commands: npm i @types/node @types/express express
-create .gitignore file to ignore folder node_modules
-create index.js file
-in index.js file add basic Express setup
-in package.json file add command start
-type command: npm start
-open route: http://localhost:8000
-open Postman and test your endpoints

38. Understanding semantic versioning in Node.js projects
-open link: https://docs.npmjs.com
-open link: https://docs.npmjs.com/about-semantic-versioning
-npm packages update types: major, minor & patch
-difference between symbols ~ and ^

39. REST API design principles for modern backend development

40. Book store API - setting up routes and controllers (Part 1)
-type command: mkdir express-book-store
-add README.md file
-type command: npm init
-type command: npm i @types/node @types/express -D
-create .gitignore file to ignore folder node_modules
-type command: npm i express
-in package.json file add command start
-create index.js file
-type command: npm run dev
-open route: http://localhost:8000
-invoke function app.get() for fetching all books
-open route: http://localhost:8000/books
-invoke function app.get() for fetching book by id
-open route: http://localhost:8000/books/:id
-test endpoints in Postman

41. Book store API - finalizing CRUD features and testing (Part 2)
-open link: https://expressjs.com/en/guide/using-middleware.html
-in index.js file invoke function app.post() for adding a new book in an array
-invoke function app.use(express.json())
-invoke function app.delete() for deleting a book from an array
-test endpoints for all methods in Postman



Section 06: Deep dive into advanced Express.js features including Middleware, Modularization 


42. Understanding Middleware functions and their execution in Express.js
-in index.js file invoke app.use() middleware functions
-in .gitignore add logs.txt

43. Advanced Middleware concepts and custom middleware implementation
-in index.js file create function loggerMiddleware()
-create function customMiddleware()
-in function app.get() for fetching all books add function customMiddleware as argument

44. Creating and integrating custom modules in Node.js projects
-Types of modules: built in, 3rd party and custom defined
-create folder custom-modules
-type command: npm init
-type command: npm i @types/node -D
-create .gitignore file to ignore folder node_modules
-in folder custom-modules create folder lib and files math.js and string.js
-create index.js file
-in index.js file import and invoke functions from files math.js and string.js

45. Refactoring the Book store API for better maintainability and structure
-open link: https://expressjs.com/en/guide/routing.html
-in folder express-book-store create folder routes and book.routes.js file
-move functions from index.js file to book.routes.js file
-export variable router
-in index.js file import variable router as const bookRouter 
-invoke function app.use() for variable bookRouter
-create folder db and books.js file
-in book.routes.js file import variable const books from db/books.js file
-create folder middlewares and logger.js file
-in logger.js file move function loggerMiddleware() from index.js file
-type command: npm start
-open Postman and test all endpoints

46. The Model-View-Controller (MVC) pattern in scalable API architecture
-create folder controllers and book.controller.js file
-create folder models and book.js file
-in book.js file create and export class Book 
-in book.controller.js file create and export controller functions
-in book.routes.js file import controller functions
-update logic for routes
-open Postman and test all endpoints



Section 07: Building Full-stack 


47. Intro to databases: SQL vs NoSQL for modern applications
-Relational DB - SQL
-Non relation DB - No SQL
-One to many vs many to many

48. What is an ORM and why use it in application development
-ORM - Object relation mapping
-open link: https://orm.drizzle.team
-open link: https://www.prisma.io
-open link: https://mongoosejs.com

49. Setting up PostgreSQL with Docker for local development
-open link: https://www.postgresql.org
-open link: https://neon.com
-open link: https://supabase.com
-open link: https://www.docker.com
-open Docker app
-type command: docker --version
-open link: https://hub.docker.com/_/postgres
-create folder node-orm and docker-compose.yml file
-in docker-compose.yml file add basic Docker setup
-type command: docker compose up
-type command: docker compose up -d
-type command: docker compose down

50. Installing and configuring Drizzle ORM with PostgreSQL
-open link: https://orm.drizzle.team/docs/get-started
-open link: https://orm.drizzle.team/docs/get-started/postgresql-new
-create folder drizzle and drizzle.config.js file
-type command: npm init
-create .gitignore file to ignore folder node_modules and .env file
-create files .env and example.env
-in .env file create variable DATABASE_URL
-type command: npm start
-open link: https://www.npmjs.com/package/drizzle-orm/v/1.0.0-beta.1-c4ae133
-open link: https://www.npmjs.com/package/pg/v/6.0.0
-open link: https://www.npmjs.com/package/dotenv/v/13.0.0
-open link: https://www.npmjs.com/package/drizzle-kit/v/1.0.0-beta.1-f92627f
-open link: https://www.npmjs.com/package/tsx/v/4.7.0
-open link: https://www.npmjs.com/package/@types/pg/v/8.15.0
-type command: npm i drizzle-orm pg dotenv
-type command: npm i -D drizzle-kit tsx @types/pg
-create folder db and index.js file
-in db/index.js file add basic Drizzle setup from documentation
-type command:  docker compose up -d
-in folder drizzle create schema.js file
-in schema.js file create and export variable const usersTable
-in drizzle.config.js file add basic Drizzle setup from documentation
-type command: npx drizzle-kit push
-update docker-compose.yml file
-type command: npx drizzle-kit studio
-open link: https://local.drizzle.studio
-create index.js file
-in index.js file create async functions getAllUsers() and createUser()
-in package.json file add command start
-type command: npm start

51. Migrating Book store app to Drizzle ORM - Part 1: Schema setup
-in folder express-book-store create docker-compose.yml file
-in docker-compose.yml file add basic Docker setup
-type command: cat docker-compose.yml    
-type command: npm i dotenv drizzle-orm pg drizzle-kit
-type command: npm start
-create files .env and example.env
-in .env file create variable DATABASE_URL
-open route: http://localhost:8000/books
-create folders drizzle and db
-in folder db create index.js file
-in db/index.js file add code from documentation
-open link: https://www.uuidgenerator.net
-in folder models create book.model.js file
-in book.model.js file create and export variable const booksTable
-create author.model.js file
-in author.model.js file create and export variable const authorsTable
-in folder models create index.js file
-in models/index.js file import and export variables const booksTable and const authorsTable
-in index.js file add import for package dotenv
-create drizzle.config.js file
-in drizzle.config.js file add code from documentation
-type command: docker compose down
-type command: docker compose up -d
-type command: npx drizzle-kit studio
-type command: npx drizzle-kit push
-open link: https://local.drizzle.studio/
-open Drizzle studio and create new users and books
-in book.controller.js file import variables const booksTable and const db
-delete files books.js and book.js

52. Migrating book store to Drizzle ORM - Part 2: Query logic
-in book.controller.js file add to functions keyword async
-update functions to use Drizzle query logic
-open route: http://localhost:8000/books

53. Testing your APIs using Postman
-open Drizzle Kit Studio and create a new user
-open Postman and test all endpoints
-create new environment variable BASE_URL
-open route: {{BASE_URL}}/books

54. Using indexes in PostgreSQL to speed up queries
-open link: https://orm.drizzle.team/docs/guides/postgresql-full-text-search
-in book.controller.js file, in function getAllBooks() add logic for query params
-open route: {{BASE_URL}}/books
-open route: {{BASE_URL}}/books?search=node
-in book.model.js file update variable const booksTable to use function index
-type command: npx drizzle-kit push
-open Postman and test endpoint for method Get all books

55. Adding foreign key relationships: Authors and Books
-create author.controller.js file and controller functions
-create author.routes.js file and routes functions
-in index.js file create variable const authorRoute
-invoke function app.use() for authors
-open Postman and create folders Books and Authors
-create new variables BOOK_ID and AUTHOR_ID
-open route: {{BASE_URL}}/authors/{{AUTHOR_ID}}/books
-test all endpoints for authors

Task: Create functions updateAuthor and deleteAuthor



Section 08: Authentication & Authorization


56. Understanding authentication vs authorization with real-world example

57. What is authentication? A story-based introduction to login systems

58. Implementing session-based authentication in Node.js applications
-type command: mkdir node-auth
-type command: cd node-auth
-type command: npm i @types/node express @types/express
-create .gitignore file
-create index.js file with Basic Express setup
-in package.json file add command start
-invoke functions app.post() for sign up, sign in and private-data
-open Postman and test endpoints

59. Adding session-based authentication support using Drizzle ORM
-type command: mkdir auth-session
-type command: cd auth-session
-type command: npm init
-type command: npm i express
-type command: npm i @types/node @types/express -D
-create .gitignore file
-create index.ts file with Basic Express setup
-in package.json file add command start, build and dev
-type command: npm i drizzle-orm pg dotenv
-type command: npm i -D drizzle-kit tsx @types/pg
-open link: https://nodejs.org/en/learn/typescript/introduction
-open link: https://www.npmjs.com/package/typescript
-type command: npm i -D typescript ts-node tsx
-type command: npx tsc --init
-update files package.json and tsconfig.json
-type command: npm start
-create folder db and files index.js and schema.ts with Basic Drizzle ORM setup
-in schema.ts file create and export variable const usersTable
-create drizzle.config.ts file with Basic Drizzle ORM setup
-open Docker to setup local database
-type command: docker ps
-create docker-compose.yml file with basic Docker setup
-type command: docker-compose up -d
-type command: docker ps
-in .env file create variables PORT and DATABASE_URL
-in package.json file add commands db:push and db:studio
-type command: npm run db:studio
-type command: npm run db:push
-open route: https://local.drizzle.studio
-open link: https://nodejs.org/api/crypto.html
-create folder routes and user.routes.ts file
-in user.routes.ts file create route '/signup' for function signUpUser
-create folder controllers and user.controller.ts file
-in user.controller.ts file create controller function signUpUser()
-in index.js file import variable userRouter
-open Postman and test endpoint for route signup
-in schema.ts file create and export variable const userSession
-type command: npm run db:push
-open route: https://local.drizzle.studio
-in user.routes.ts file create route '/login' for function loginUser
-in user.controller.ts file create controller function loginUser()
-open Postman and test endpoint for route login

60. Building secure auth workflows using Express.js middleware functions
-in user.controller.ts file create and export async functions getCurrentSession() and updateUser()
-in user.routes.ts file create two routes '/' for functions getCurrentSession and updateUser
-create folder middlewares and currentUserMiddleware.ts file
-in currentUserMiddleware.ts file create and export async function currentUserMiddleware()
-in user.routes.ts file import function currentUserMiddleware
-in functions router.get() and router.patch() pass function currentUserMiddleware as argument
-open Postman and test endpoints for routes '/' with methods GET and PATCH

61. Creating stateless authentication using JWT (JSON web tokens)
-open link: https://www.jwt.io
-open link: https://www.npmjs.com/package/jsonwebtoken
-open link: https://www.npmjs.com/package/@types/jsonwebtoken
-type command: npm i jsonwebtoken
-type command: npm i --save-dev @types/jsonwebtoken
-in .env file create variable JWT_SECRET
-open link: https://jwtsecrets.com and generate new jwt secret token
-update function currentUserMiddleware() in currentUserMiddleware.ts file
-open Postman and test endpoint for login 
-in option Authorization add Bearer token

62. Introduction to authorization and role-based access control (RBAC)

63. Implementing role-based authorization logic in Express.js applications
-create admin.routes.ts file for admin routes
-create admin.controller.ts file for admin controller functions
-invoke function router.get()
-in index.ts file import variable adminRouter
-open Postman and test endpoint http://localhost:8000/admin/users with method GET
-add to route admin/users option Authorization Bearer token
-rename file currentUserMiddleware.ts to auth.middleware.ts file
-rename function currentUserMiddleware to authMiddleware()
-in index.ts file import function authMiddleware from auth.middleware.ts file
-invoke function app.use(authMiddleware)
-in auth.middleware.ts file create and export function ensureAuth()
-in files admin.routes.ts and user.routes.ts import function ensureAuth from auth.middleware.ts file 
-in schema.ts file add to model usersTable field rote
-type command: npm run db:push
-in auth.middleware.ts file create and export async function restrictToRole()
-in admin.routes.ts file import function restrictToRole from auth.middleware.ts file
-in function router.get() pass function restrictToRole as argument

Types improvements in files auth.middleware.ts & user.controller.ts
-in auth.middleware.ts file create interfaces AuthenticatedUser and  AuthenticatedRequest
-in user.controller.ts file create interface AuthenticatedRequest



Section 09: No SQL with MongoDB - Bonus


64. Introduction to MongoDB (No SQL)

65. MongoDB Atlas and Node Express app setup
-open link: https://www.mongodb.com/products/platform/atlas-database
-create new project in MongoDB Atlas
-type command: mkdir node-mongodb
-type command: cd node-mongodb   
-type command: npm init
-create files .env and example.env
-in .env file create variables PORT and DATABASE_URL
-create .gitignore file
-create index.ts file
-type command: https://www.npmjs.com/package/mongodb
-type command: npm i express mongodb dotenv
-type command: npm install -D @types/node @types/express tsx
-in package.json file add commands start, dev and build
-update file tsconfig.json
-in index.js file add basic Express setup
-type command: npm run dev

66. MongoDB Mongoose setup
-open link: https://mongoosejs.com
-open link: https://www.npmjs.com/package/mongoose
-open link: https://www.npmjs.com/package/@types/mongoose/v/3.8.40
-type command: npm i mongoose
-type command: npm i -D @types/mongoose
-create folder db and connection.ts file
-in connection.ts file create and export async function connectMongoDB()
-in index.ts file import and invoke function connectMongoDB()
-create folder models and user.model.ts file
-in user.model.ts file create and export variable const User

67. Creating a basic CRUD application with MongoDB and Express
-type command: npm i jsonwebtoken
-type command: npm i -D @types/jsonwebtoken
-update user.model.ts file with field password
-create folder routes and user.routes.ts file
-in user.routes.ts file invoke functions router.post() for sign up and login
-create folder controllers and user.controller.ts file
-in user.controller.ts file create and export async functions signUpUser() and loginUser()
-in index.ts file import variable userRouter
-invoke function app.use() for route '/user'
-open Postman and test endpoints for routes signup and login

68. Authentication middleware with Express and MongoDB
-create folder middlewares and auth.middleware.ts file
-in auth.middleware.ts file create and export async functions authMiddleware() and ensureAuth()
-in index.ts file import function authMiddleware
-invoke function app.use(authMiddleware)
-in user.routes.ts file import function ensureAuth
-invoke route router.patch() for updating user profile
-in user.controller.ts file create and export async function updateUserProfile()
-in user.routes.ts file import function updateUserProfile
-open Postman and test endpoints for login and update profile

69. Node.js Mongoose aggregation pipeline introduction
-open link: https://www.mongodb.com/docs/manual/aggregation



Section 10: Mega project - URL Shortener project with auth, PostgreSQL & Drizzle ORM

70. Overview of the URL Shortener project

71. Tech stack: Express, Drizzle ORM, JWT, PostgreSQL and Zod
-open link: https://bitly.com
-open link: https://zod.dev
-type command: mkdir url-shortener
-type command: cd url-shortener
-create README.md file

72. Bootstrapping a clean Express server setup for backend development
-type command: npm init
-type command: ni index.ts
-create Basic Node.js Express app with Typescript setup based on previous projects
-create files .env and example.env
-in .env file create variable PORT
-create .gitignore file
-update tsconfig.json file
-in package.json file add commands dev, start and build
-type command: npm run dev
-type command: npm run build
-open Postman and test endpoint for home route

73. Configuring PostgreSQL with Docker for local development environment
-open Docker app
-type command: ni docker-compose.yml
-in docker-compose.yml file add basic Docker setup for database
-in .env file create variable DATABASE_URL
-type command: docker ps
-type command: docker compose up -d
-type command: docker ps

74. Installing and setting up Drizzle ORM for database
-type command: npm i drizzle-orm pg dotenv
-type command: npm i -D drizzle-kit tsx @types/pg
-create folder db and index.ts file
-create folder models and files user.model.ts and index.ts
-create drizzle.config.ts file
-add code from documentation
-in package.json file add commands db:push and db:studio
-type command: npm run db:push
-type command: npm run db:studio
-open link: https://local.drizzle.studio

75. Designing and implementing the User schema using Drizzle ORM
-in user.model.ts file update variable const usersTable
-type command: npm run db:push

76. Creating a secure sign up route
-create folder controllers and user.controller.ts file
-in user.controller.ts file create and export async function signUpUser()
-create folder routes and user.routes.ts file
-in user.routes.ts file create variable const router
-import function signUpUser
-in index.ts file import variable userRouter
-invoke function app.use() for router '/user'
-open Postman and test endpoint for sign up route

77. Adding Zod for validating incoming user signup and login data
-open link: https://www.npmjs.com/package/zod
-type command: npm i zod
-create folder validation and request.validation.ts file
-in request.validation.ts file create and export variable const signUpPostRequestBodySchema
-in user.controller.ts file import variable signUpPostRequestBodySchema
-update function signUpUser()
-update user.model.ts file
-open Postman and test endpoint for sign up route

78. Refactoring: Moving user logic and validation to separate service module
-create folder utils and hash.ts file
-in hash.ts file create and export function hashPasswordWithSalt()
-import functions createHmac and randomBytes from package crypto
-in user.controller.ts file import and invoke function hashPasswordWithSalt()
-create folder services and user.service.ts file
-in user.service.ts file create and export functions getUserByEmail() and createNewUser()
-in user.controller.ts file import and invoke functions getUserByEmail() and createNewUser()
-open Postman and test endpoint for sign up route

79. Building a login route with JWT authentication and token response
-in request.validation.ts file create and export variable const loginPostRequestBodySchema
-in user.controller.ts file import variable loginPostRequestBodySchema
-in hash.ts file update function hashPasswordWithSalt()
-type command: npm i jsonwebtoken
-type command: npm i -D @types/jsonwebtoken
-in .env file create variable JWT_SECRET
-in user.controller.ts file create and export async function loginUser()
-import and invoke function jwt()
-create variable const token
-in user.routes.ts file import function loginUser
-invoke function router.post() for route '/login'
-open Postman and test endpoint for login route

80. Refactoring: Extracting JWT sign and verify logic into utility functions
-in folder utils create token.ts file
-in token.ts file create and export async function createUserToken()
-in folder validation create token.validation.ts file
-in token.validation.ts file create and export variable const userTokenSchema
-in token.ts file import variable userTokenSchema
-in user.controller.ts file import and invoke function createUserToken()
-open Postman and test endpoint for login route

81. Creating authentication middleware to extract and validate current user 
-create folder middlewares and auth.middleware.ts file
-in auth.middleware.ts file create and export async function authenticationMiddleware()
-in token.ts file create and export async function validateUserToken()
-in auth.middleware.ts import function validateUserToken
-in index.ts file import function authenticationMiddleware
-invoke function app.use(authenticationMiddleware)
-open Postman and test endpoint for login route

82. Handling shorten URL requests via POST and generating unique shortcodes
-in folder models create url.model.ts file
-in url.model.ts file create and export variable const urlsTable
-in index.ts file export variable urlsTable
-type command: npm run db:push
-open route: https://local.drizzle.studio

83. Creating a schema for shortened URLs using Drizzle ORM
-open link: https://www.npmjs.com/package/nanoid
-type command: npm i nanoid
-in folder controllers create url.controller.ts file
-in url.controller.ts file create and export async function createShortenURL()
-in folder routes create url.routes.ts file
-in url.routes.ts file import function createShortenURL
-invoke function router.post() for route '/shorten-url'
-in request.validation.ts file create and export variable shortenPostRequestBodySchema
-in url.controllers.ts file import variable shortenPostRequestBodySchema
-in index.ts file import variable urlRouter
-invoke function app.use(urlRouter)
-open Postman and add option Authorization for route '/shorten-url'
-test endpoint for route '/shorten-url' with POST method

84. Refactoring: Extracting URL creation logic
-in auth.middleware.ts file create and export function ensureAuth
-in url.routes.ts file import function ensureAuth
-in function router.post() add function ensureAuth as argument
-in url.controller.ts file update function createShortenURL()
-test endpoint for route '/shorten-url' with POST method

85. Implementing redirection logic from short URL
-in url.controller.ts file create and export async function getShortenUrl()
-in url.routes.ts file invoke function router.get() for route '/:shortCode'
-in index.ts update update route for urlRouter 
-open Postman and test endpoint for route '/shorten-url' with POST method
-test endpoint for route '/:shortCode' with GET method

86. Fetching all shortened URLs by the logged-in user
-in url.controller.ts file create and export async function getAllUserURLs()
-in url.routes.ts file invoke function router.get() for route '/codes'
-open Postman and test endpoint for route '/codes' with GET method

87. Deleting URL with ownership and authorization
-in url.controller.ts file create and export async function deleteShortenURL()
-in url.routes.ts file invoke function router.delete() for route '/:id'
-open Postman and test endpoint for route '/:id' with DELETE method

Updating URL with ownership and authorization
-in url.controller.ts file create and export async function updateShortenURL()
-in url.routes.ts file invoke function router.put() for route '/:id'
-open Postman and test endpoint for route '/:id' with PUT method



Section 11: Mastering Docker for developers - From basics to CLI and dockerfile - bonus


88. Introduction to Docker and the rise of containerization in DevOps

89. Real-world problem that Docker solve in modern development

90. Understanding the difference between Docker and Virtual machines

91. How to install Docker on your system for local development
-open link: https://docs.docker.com/engine/install
-type command: docker version

92. Docker containers vs Docker images: What's the difference ?
-open link: https://www.docker.com/resources/what-container/
-open link: https://docs.docker.com/get-started/docker-concepts/the-basics/what-is-an-image
-Docker image - configuration
-Docker container - run Docker image

93. Introduction to Docker CLI and commonly used commands
-open Docker desktop application
-type command: docker run -it ubuntu
-type command: docker help
-type command: docker ps
-type command: docker images
-type command: docker run -it ubuntu
-type command: docker info
-exit Docker desktop application
-type command: docker info

94. Running Docker containers using the CLI with practical examples
-type command: docker ps -a
-type command: docker run -it ubuntu
-type command: docker run ubuntu
-type command: exit
-type command: docker run -it alpine
-type command: docker pull busybox
-open link: https://hub.docker.com

95. Working with Docker images through command-line interface (CLI)
-type command: docker image --help
-type command: docker images
-type command: docker image inspect
-type command: docker image inspect alpine
-type command: docker image rm alpine
-type command: docker ps -a
-type command: docker container --help
-type command: docker container rm (container id)
-type command: docker images
-type command: docker image pull alpine
-type command: docker images
-type command: docker image prune
-type command: docker images --help
-type command: docker image ls

96. Exploring Docker container commands for management and debugging
-type command: docker container --help
-type command: docker run -it --name my-container ubuntu
-type command: docker container ls
-type command: docker kill (container id)
-type command: docker container rm (container id)
-type command: docker container rm --help
-type command: docker ps
-type command: docker ps -a
-type command: docker container rm (container id) (container id) (container id)
-type command: docker run -it ubuntu
-Image: Entrypoint
-type command: docker image inspect ubuntu
-type command: docker run -it ubuntu ls
-type command: docker run -it ubuntu bash
-type command: docker run -it busybox ping google.com
-type command: docker image inspect busybox
-type command: docker run --help

97. Creating and using a Dockerfile to containerize Node.js apps
-create basic Express.js app
-type command: npm -v (11.5.2)
-type command: node -v (v20.19.1)
-create Dockerfile file
-open link: https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
-in Dockerfile file add basic Docker setup
-add commands FROM, RUN, COPY and WORKDIR
-type command: docker build -t udemy-docker-express-app .
-type command: docker images
-type command: docker run -it udemy-docker-express-app
-type command: cat index.ts
-type command: npm -v
-type command: node -v
-type command: exit
-make some small change inside the existing code
-type command: docker build -t udemy-docker-express-app .
-type command: docker run -it udemy-docker-express-app
-type command: npm start
-open route: http://localhost:8000 in browser

98. Best practices to optimize Docker images for speed and performance
-update Dockerfile file 
-type command: docker build -t udemy-docker-express-app .
-type command: docker run -it udemy-docker-express-app
-type command: docker image inspect udemy-docker-express-app
-type command: docker run -it udemy-docker-express-app

99. Understanding and implementing port mapping in Docker containers
-type command: docker build -t udemy-docker-express-app .
-type command: docker run -it udemy-docker-express-app
-open route: http://localhost:8000 in browser
-type command: docker run -it -p 8000:8000 udemy-docker-express-app
-open route: http://localhost:8000 in browser
-type command: docker run -it -p 3000:8000 udemy-docker-express-app
-open route: http://localhost:8000 in browser
-open route: http://localhost:3000 in browser
-open Docker application to see PORT

100. Auto port mapping in Docker: Dynamic exposure of container ports
-type command: docker build -t udemy-docker-express-app .
-type command: docker run -it -p 8000:8000 udemy-docker-express-app
-open route: http://localhost:8000 in browser
-in Dockerfile file add command EXPOSE
-type command: docker run -it udemy-docker-express-app
-open route: http://localhost:8000 in browser
-type command: docker inspect udemy-docker-express-app
-type command: docker run -it -p 3000:8000 udemy-docker-express-app
-open route: http://localhost:8000 in browser
-open route: http://localhost:3000 in browser
-type command: docker run -it -P udemy-docker-express-app
-type command: docker ps
-update Dockerfile with port range from 8000 to 8010
-type command: docker build -t udemy-docker-express-app .
-type command: docker run -it -P udemy-docker-express-app
-type command: docker ps -a
-open route: http://localhost:8000 in browser
-type command: docker run -it -P --rm udemy-docker-express-app
-type command: docker run --help
-stop Docker container in Cursor terminal
-type command: docker run -itd -P --rm udemy-docker-express-app
-type command: docker ps
-type command: docker stop (container id)

101. Publishing Docker images to Docker hub or private registries
-open link: https://hub.docker.com
-open link: https://hub.docker.com/u/kimamovic21
-open link: https://hub.docker.com/repository/create?namespace=kimamovic21
-create new repository for Docker application
-type command: docker build -t kimamovic21/udemy-docker-node-express-app-hc-pg .
-type command: docker login
-type command: docker push kimamovic21/udemy-docker-node-express-app-hc-pg
-type command: docker run -it -P kimamovic21/udemy-docker-node-express-app-hc-pg
-type command: docker build -t udemy-docker-express-app .
-type command: docker push udemy-docker-express-app
-type command: docker tag udemy-docker-express-app kimamovic21/udemy-docker-node-express-app-hc-pg
-type command: docker push kimamovic21/udemy-docker-node-express-app-hc-pg
-type command: docker tag udemy-docker-express-app kimamovic21/udemy-docker-node-express-app-hc-pg:v1
-type command: docker push kimamovic21/udemy-docker-node-express-app-hc-pg:v1

102. Building optimized multi-stage Docker images for production use
-type command: npm run build
-type command: npm start
-create folder src
-move index.ts file to folder src
-update Dockerfile file
-update tsconfig.json file
-type command: docker build -t docker-express-app .
-type command: docker run -it -p 8000:8000 docker-express-app
-open route: http://localhost:8000
-type command: docker run -it docker-express-app

103. Security best practices for running Docker containers safely
-update Dockerfile file
-type command: docker run -it -p 3000:3000 -e PORT=3000 docker-express-app
-type command: docker run -it -p 3000:3000 --env-file .env docker-express-app

104. Understanding Docker bridge networking for container communication
-open link: https://docs.docker.com/engine/network
-type command: docker run -it busybox
-type command: ping google.com
-type command: docker network
-type command: docker network ls
-type command: docker container ps -a
-type command: docker run -itd --name=my-container --rm busybox
-type command: docker container ps
-type command: docker network ls
-type command: docker network inspect bridge
-type command: docker run -itd --name=my-container-2 --rm busybox
-type command: docker network inspect bridge
-type command: docker ps
-type command: docker exec my-container-2 ping my-container
-type command: docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-container
-type command: docker exec my-container-2 ping 172.17.0.2
-type command: docker network ls

105. Creating and using custom Docker bridges for network isolation
-type command: docker network
-type command: docker network create
-type command: docker network create --help
-type command: docker network create milkyway
-type command: docker network ls
-type command: docker run -itd --network=milkyway --rm --name=spiderman busybox
-type command: docker network inspect milkyway
-type command: docker run -itd --network=milkyway --rm --name=ironman busybox
-type command: docker network inspect milkyway
-type command: docker run -itd --network=milkyway --rm --name=dr nginx
-type command: docker network inspect milkyway
-type command: docker ps
-type command: docker exec spiderman ping 172.17.0.3
-type command: docker exec my-container-2 ping 172.17.0.2
-type command: docker exec spiderman ping 172.17.0.3
-type command: docker exec spiderman ping ironman
-type command: docker exec spiderman ping dr
-type command: docker network
-type command: docker network connect milkyway my-container-2
-type command: docker inspect milkyway
-type command: docker exec spiderman ping my-container-2
-type command: docker network disconnect milkyway dr
-type command: docker exec spiderman ping dr
-type command: docker network rm milkyway

106. Docker other modes of networking
-type command: docker run -it --rm --network=none busybox
-type command: google.com

107. Attaching host machine volumes to Docker containers for data sharing
-type command: docker run -it --rm ubuntu
-type command: cd home
-type command: cd ubuntu
-type command: ls
-type command: cat >> secret.txt
-type command: ls
-type command: cat secret.txt
-type command: docker run -it --rm ubuntu
-type command: cd home
-type command: cd ubuntu
-type command: ls
-create my-data.ts file
-type command: docker run -it --rm -v /Users/BNC/Desktop/my-data:/home/ubuntu/kerim ubuntu
-type command: cd home
-type command: ls
-type command: cd ubuntu
-type command: ls
-type command: cd kerim
-type command: ls
-type command: cat >> secret.txt
-type command: ls
-type command: rm -rf index.ts

108. Creating and managing custom named volumes in Docker for persistence
-type command: docker volume
-type command: docker volume ls
-type command: docker volume create custom_data
-type command: docker volume ls | findstr custom_data
-type command: docker run -it --rm -v custom_data:/server ubuntu
-type command: ls
-type command: cd server
-type command: cat >> ubuntu.txt
-type command: docker volume ls | findstr custom_data
-type command: docker run -it --rm -v custom_data:/server busybox
-type command: ls
-type command: cd server
-type command: ls
-type command: cat >> busybox.txt
-open Docker desktop app 
-select option Volumes to see created files
-type command: docker run -it --rm -v custom_data:/server busybox
-type command: docker run -it --rm -v custom_data:/home/ubuntu/custom ubuntu
-type command: cd home/ubuntu/custom
-type command: ls

109. Introduction to Docker compose
-type command: mkdir docker-express-redis-app
-type command: cd docker-express-redis-app
-copy files .env, example.env, .gitignore, Dockerfile, tsconfig.json, package.json and package.lock.json from previous project
-create folder app and server.ts file with basic Express setup
-create folder src and index.ts file with Basic Redis setup
-type command: npm i
-opel link: https://www.npmjs.com/package/ioredis
-type command: npm i ioredis pg
-type command: npm i --save-dev @types/pg 
-open route: http://localhost:8000
-create docker-compose.yml with basic Docker setup
-type command: docker compose up
-type command: docker compose down -v
-type command: docker compose up -d
-type command: npm run build
-type command: npm start

110. Networking in Docker compose
-open link: https://docs.docker.com/compose/how-tos/networking
-type command: docker network ls
-type command: docker compose up -d
-type command: docker network ls
-update docker-compose-yml file

111. Volume in Docker compose
-update docker-compose-yml file
-type command: docker compose down -v
-type command: docker compose up -d
-type command: npm run build
-type command: npm start
-type command: docker volume ls

112. Custom Docker builds
-update docker-compose-yml file
-update index.ts file
-type command: docker compose down -v
-type command: docker compose up -d
-type command: docker compose down
-type command: docker compose up
-type command: docker compose up --build

113. Introduction to Docker orchestration and why it's crucial for production
-open link: https://docs.docker.com/guides/orchestration

114. Creating and configuring a new AWS account for ECS deployment
-open link: https://aws.amazon.com
-open link: https://aws.amazon.com/cli
-type command: aws --version
-open option Dashboard and option Users
-click Create user button
-create new user with admin access
-create new Access key
-type command: sudo aws configure
-type your AWS access key id, AWS secret access key, default region name and default output format
-type command: cd ./aws
-type command: ls
-type command: aws get-current-user
-type command: aws iam get-user

115. Setting up Amazon ECR to push Docker images
-What is ECR ? - Elastic container registry
-open link: https://aws.amazon.com/ecr
-open option Repositories
-create new repository
-update Dockerfile file with variable PORT
-type command: docker build -t backend .
-type command: docker images
-type commands from documentation

116. Launching and configuring ECS clusters to run Docker containers
-open link: https://aws.amazon.com/ecs
-click button Create button

117. Defining ECS Tasks and creating task definitions for container execution
-choose option Task definition
-click button Create new task definition
-click option Health check
-click option Interval
-update server.ts file

118. Deploying ECS services with load balancer for high quality
-open Cluster
-click option Service
-click button Create
-open option Cloud Formation
-type command: docker build -t backend .

119. Cleaning up AWS ECS and ECR resources to avoid unnecessary billing
-delete existing repository